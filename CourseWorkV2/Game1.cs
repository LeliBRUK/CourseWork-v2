using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using System;

namespace CourseWorkV2
{
  public class Game1 : Game
  {
    private Song backgroundSong;
    private GraphicsDeviceManager graphics;
    private SpriteBatch spriteBatch;

    //Controls
    //If Character is Blue then controls are wasd if Character id Red then controls are arrowkeys
    //W=jump,A=Left,D=Right,S=Spikeor SHuriken,Q=After jumping DoubleJumping for Thief
    //Up=Jump,Left=Left,Right=Right,Dowwn=Shuriken or Spikes,Right SHift=Jumping

    //TODO Make a so that shuriken is thrown in the direcction facing
    //Will Send the Tutorial Levels As Seperate cause I do not know how to add level progression
    //Mellee Attacks
    //The Dueling Room should be Done by doing Interactive elements and AI as it consist of Moving Walls and treasure


    bool Tutorial = true;
    static TimeSpan TutorialLevel = TimeSpan.FromSeconds(7);//Changes the time limit for Each Tutorial Level Thinking of Keeping 150sec
    private TimeSpan elapsedTime;
    int i = 1;
    int k = 1;

    Texture2D text1;
    Texture2D text2;
    Texture2D text3;
    Texture2D text4;
    Texture2D text5;
    Texture2D text6;

    Vector2 position;
    Vector2 position2;
    Vector2 position3;
    Vector2 position4;

    KnightBlue Player1_B;
    ThiefRed Player2_R;

    KnightRed Player1_R;
    ThiefBlue Player2_B;

    Texture2D SpikeTexture;
    SpikeManager Spike_B;
    SpikeManager Spike_R;

    Texture2D ShurikenTexture;
    ShurikenManager Shuriken_R;
    ShurikenManager Shuriken_B;

    int mapswitcher; //switches map generated
    Random random = new Random();

    int characterswitcher;

    KnightBlue Tutorial1_B;
    ThiefRed Tutorial1_R;

    KnightRed Tutorial2_R;
    ThiefBlue Tutorial2_B;

    Map1 map;
    Map1 tLevel1;
    Map1 tLevel2;
    Map1 map2;

    public Game1()
    {
      graphics = new GraphicsDeviceManager(this);
      Content.RootDirectory = "Content";
      IsMouseVisible = true;
    }

    protected override void Initialize()
    {
      // TODO: Add your initialization logic here
      map = new Map1();
      Player1_B = new KnightBlue();
      Player2_R = new ThiefRed();

      Player1_R = new KnightRed();
      Player2_B = new ThiefBlue();

      map2 = new Map1();

      tLevel1 = new Map1();
      Tutorial1_B = new KnightBlue();
      Tutorial1_R = new ThiefRed();

      tLevel2 = new Map1();
      Tutorial2_R = new KnightRed();
      Tutorial2_B = new ThiefBlue();

      Spike_R = new SpikeManager();
      Spike_B = new SpikeManager();

      Shuriken_R = new ShurikenManager();
      Shuriken_B = new ShurikenManager();

      mapswitcher = random.Next(0, 2);
      characterswitcher = random.Next(0, 2);

      //graphics.PreferredBackBufferWidth = 800;
      //graphics.PreferredBackBufferHeight = 950;
      graphics.PreferredBackBufferWidth = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width;
      graphics.PreferredBackBufferHeight = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height;
      graphics.ApplyChanges();

      backgroundSong = Content.Load<Song>("audio/generalBackground");
      MediaPlayer.Play(backgroundSong);
      MediaPlayer.IsRepeating = true;
      MediaPlayer.Volume = 0.2f;

      base.Initialize();
    }

    protected override void LoadContent()
    {
      spriteBatch = new SpriteBatch(GraphicsDevice);
      Tiles.Content = Content;
      // TODO: use this.Content to load your game content here

      text1 = Content.Load<Texture2D>("Text/Text 1");
      text2 = Content.Load<Texture2D>("Text/Text 2");
      text3 = Content.Load<Texture2D>("Text/Text 3");
      text4 = Content.Load<Texture2D>("Text/Text 4");
      text5 = Content.Load<Texture2D>("Text/Text 5");
      text6 = Content.Load<Texture2D>("Text/Text 6");

      position = new Vector2(30, 1200);
      position2 = new Vector2(30, 240);
      position3 = new Vector2(2112, 240);
      position4 = new Vector2(2112, 1200);

      tLevel1.Generate(new int[,]{
              {4,4,4,4,4,4,4,4,4,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,4,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,1,1,0,0,5,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,1,5,0,0,0,0,0,0,0,4,1,5,0,0,1,1,0,1,5,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,5,5,1,0,0,0,0,0,0,5,5,0,0,4,0,0,0,0,0,0,0,0,0,0,1,5,5,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,5,5,1,1,0,0,0,0,0,0,0,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,7,7,0,0,0,0,0,0,0,1,1,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,7,7,0,0,0,0,1,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,1,0,0,0,0,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,7,7,6,6,6,6,6,6,6,6,0,0,0,0,0,4,0,0,0,0,0,6,6,6,6,6,6,6,6,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,5,5,1,0,0,0,0,0,0,4,0,0,0,0,0,0,5,5,1,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,4,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
               }, 48);

      tLevel2.Generate(new int[,]{
              {4,4,4,4,4,4,4,4,4,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,4,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,5,0,0,1,1,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,5,1,0,1,1,0,0,5,1,4,0,0,0,0,0,0,0,5,1,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,5,5,1,0,0,0,0,0,0,0,0,0,0,4,0,0,5,5,0,0,0,0,0,0,1,5,5,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,7,7,0,0,0,0,0,0,0,1,1,5,5,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,1,1,0,0,0,0,0,0,0,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,7,7,0,0,0,0,1,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,1,0,0,0,0,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,7,7,6,6,6,6,6,6,6,6,0,0,0,0,0,4,0,0,0,0,0,6,6,6,6,6,6,6,6,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,4,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,5,5,1,0,0,0,0,0,0,4,0,0,0,0,0,0,5,5,1,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,4,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
               }, 48);

      if (mapswitcher == 0)
      {
        map.Generate(new int[,]{
              {4,4,4,4,4,4,4,4,4,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,1,5,5,5,4,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,1,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,5,5,5,0,0,0,0,0,0,0,0,5,0,7,7,7,1,1,1,1,0,0,5,5,0,0,1,5,5,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,5,1,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,7,7,7,0,0,0,1,5,1,0,0,5,0,0,1,1,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,5,1,1,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,1,1,1,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,0,5,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,0,0,0,0,1,1,1,1,1,4,0,0,0,5,0,0,1,1,0,0,1,1,0,0,0,0,5,5,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
               }, 48);
      }
      if (mapswitcher == 1)
      {
        map.Generate(new int[,]{
              {4,4,4,4,4,4,4,4,4,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,7,7,0,1,7,7,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,0,0,0,1,5,1,5,1,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,1,0,0,0,7,7,0,0,7,7,1,0,0,5,1,5,0,0,0,0,0,0,0,0,5,5,5,7,7,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,7,7,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,7,7,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,7,7,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,5,1,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,1,1,0,0,1,5,5,1,0,0,0,5,5,0,0,1,1,5,0,0,0,1,1,1,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,5,5,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,5,1,5,5,0,0,0,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,4,4,4,4,4,4,4,4,4,4},
               }, 48);
      }


      //Duelling Map
      map2.Generate(new int[,]{
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
              {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
               }, 48);

      //Where 5 is we need to make a timed Platform
      //Where 6 is we need Horizontal moving Platform
      //Where 7 is we need Vertical moving Platform

      //48 is Gold


      SpikeTexture = Content.Load<Texture2D>("Weapons/Spikes");
      ShurikenTexture = Content.Load<Texture2D>("Weapons/Shuriken");

      //After Each level Update switcher to change the controls of the character here

      Tutorial1_B.Load(Content);
      Tutorial1_R.Load(Content);
      Spike_B.Initialize(SpikeTexture);
      Shuriken_R.Initialize(ShurikenTexture);

      Tutorial2_B.Load(Content);
      Tutorial2_R.Load(Content);
      Spike_R.Initialize(SpikeTexture);
      Shuriken_B.Initialize(ShurikenTexture);


      Player1_B.Load(Content);
      Player2_R.Load(Content);
      Spike_B.Initialize(SpikeTexture);
      Shuriken_R.Initialize(ShurikenTexture);


      Player1_R.Load(Content);
      Player2_B.Load(Content);
      Spike_R.Initialize(SpikeTexture);
      Shuriken_B.Initialize(ShurikenTexture);

    }

    protected override void Update(GameTime gameTime)
    {
      if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
        Exit();

      //change it i<4 to Load Duelling Map
      elapsedTime += gameTime.ElapsedGameTime;
      if (elapsedTime >= TutorialLevel)
      {
        elapsedTime -= TutorialLevel;
        if (i < 3)
        {
          i++;
        }
      }

      if (i == 1)
      {
        Tutorial1_B.Update(gameTime);
        foreach (CollisionTiles tile in tLevel1.CollisionTiles)
        {
          Tutorial1_B.Collision(tile.Rectangle, map.Width, map.Height);
        }

        Tutorial1_R.Update(gameTime);
        foreach (CollisionTiles tile in tLevel1.CollisionTiles)
        {
          Tutorial1_R.Collision(tile.Rectangle, map.Width, map.Height);
        }

        Spike_B.UpdateSpikeManager(gameTime, Tutorial1_B, Tutorial1_R);
        base.Update(gameTime);

        Shuriken_R.UpdateShurikenManager(gameTime, Tutorial1_R, Tutorial1_B);
        base.Update(gameTime);
      }

      if (i == 2)
      {
        Tutorial2_R.Update(gameTime);
        foreach (CollisionTiles tile in tLevel2.CollisionTiles)
        {
          Tutorial2_R.Collision(tile.Rectangle, map.Width, map.Height);
        }

        Tutorial2_B.Update(gameTime);
        foreach (CollisionTiles tile in tLevel2.CollisionTiles)
        {
          Tutorial2_B.Collision(tile.Rectangle, map.Width, map.Height);
        }

        Spike_R.UpdateSpikeManager2(gameTime, Tutorial2_R, Tutorial2_B);
        base.Update(gameTime);

        Shuriken_B.UpdateShurikenManager2(gameTime, Tutorial2_B, Tutorial2_R);
        base.Update(gameTime);

      }

      if (i == 3)
      {
        Tutorial = false;

        if (characterswitcher == 0)
        {
          Player1_B.Update(gameTime);
          foreach (CollisionTiles tile in map.CollisionTiles)
          {
            Player1_B.Collision(tile.Rectangle, map.Width, map.Height);
          }

          Player2_R.Update(gameTime);
          foreach (CollisionTiles tile in map.CollisionTiles)
          {
            Player2_R.Collision(tile.Rectangle, map.Width, map.Height);
          }

          Spike_B.UpdateSpikeManager(gameTime, Player1_B, Player2_R);
          base.Update(gameTime);

          Shuriken_R.UpdateShurikenManager(gameTime, Player2_R, Player1_B);
          base.Update(gameTime);
        }
        // TODO: Add your update logic here

        else if (characterswitcher == 1)
        {
          Player1_R.Update(gameTime);
          foreach (CollisionTiles tile in map.CollisionTiles)
          {
            Player1_R.Collision(tile.Rectangle, map.Width, map.Height);
          }

          Player2_B.Update(gameTime);
          foreach (CollisionTiles tile in map.CollisionTiles)
          {
            Player2_B.Collision(tile.Rectangle, map.Width, map.Height);
          }

          Spike_R.UpdateSpikeManager2(gameTime, Player1_R, Player2_B);
          base.Update(gameTime);

          Shuriken_B.UpdateShurikenManager2(gameTime, Player2_B, Player1_R);
          base.Update(gameTime);

        }

        /* if (i == 4)
         {
             if (characterswitcher == 1)
             {
                 D1_B.Update(gameTime);
                 foreach (CollisionTiles tile in map2.CollisionTiles)
                 {
                     D1_B.Collision(tile.Rectangle, map.Width, map.Height);
                 }
                 D1_R.Update(gameTime);
                 foreach (CollisionTiles tile in map2.CollisionTiles)
                 {
                     D1_R.Collision(tile.Rectangle, map.Width, map.Height);
                 }
                 Spike_B.UpdateSpikeManager(gameTime, D1_B);
                 base.Update(gameTime);

                 Shuriken_R.UpdateShurikenManager(gameTime, D1_R);
                 base.Update(gameTime);
             }

             else if (characterswitcher == 2)
             {
                 D2_R.Update(gameTime);
                 foreach (CollisionTiles tile in map2.CollisionTiles)
                 {
                     D2_R.Collision(tile.Rectangle, map.Width, map.Height);
                 }
                 D2_B.Update(gameTime);
                 foreach (CollisionTiles tile in map2.CollisionTiles)
                 {
                     D2_B.Collision(tile.Rectangle, map.Width, map.Height);
                 }

                 Spike_R.UpdateSpikeManager2(gameTime, D2_R);
                 base.Update(gameTime);

                 Shuriken_B.UpdateShurikenManager2(gameTime, D2_B);
                 base.Update(gameTime);


             }*/

        base.Update(gameTime);

      }

    }

    protected override void Draw(GameTime gameTime)
    {
      if (mapswitcher == 0)
      {
        GraphicsDevice.Clear(Color.CornflowerBlue);
      }
      if (mapswitcher == 1)
      {
        GraphicsDevice.Clear(Color.DarkGray);
      }

      spriteBatch.Begin();


      if (Tutorial == true && i == 1)
      {
        tLevel1.Draw(spriteBatch);
        Tutorial1_B.Draw(spriteBatch);
        Tutorial1_R.Draw(spriteBatch);

        spriteBatch.Draw(text1, position, Color.White);
        spriteBatch.Draw(text2, position4, Color.White);
        spriteBatch.Draw(text3, position2, Color.White);
        spriteBatch.Draw(text6, position3, Color.White);
      }

      else if (Tutorial == true && i == 2)
      {
        tLevel2.Draw(spriteBatch);
        Tutorial2_B.Draw(spriteBatch);
        Tutorial2_R.Draw(spriteBatch);

        spriteBatch.Draw(text1, position, Color.White);
        spriteBatch.Draw(text2, position4, Color.White);
        spriteBatch.Draw(text4, position2, Color.White);
        spriteBatch.Draw(text5, position3, Color.White);

      }


      else if (Tutorial == false && i == 3)
      {

        map.Draw(spriteBatch);


        if (characterswitcher == 0)
        {
          Player1_B.Draw(spriteBatch);
          Player2_R.Draw(spriteBatch);
        }
        else if (characterswitcher == 1)
        {
          Player1_R.Draw(spriteBatch);
          Player2_B.Draw(spriteBatch);
        }

      }

      Spike_B.DrawSpikes(spriteBatch);
      Shuriken_R.DrawShuriken(spriteBatch);

      spriteBatch.End();
      // TODO: Add your drawing code here
      // Player1_B.Draw(spriteBatch)

      base.Draw(gameTime);
    }
  }
}